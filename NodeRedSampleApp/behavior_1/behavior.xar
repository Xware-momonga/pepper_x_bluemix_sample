<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Say Text" id="1" localization="8" tooltip="Say the text received on its input." x="555" y="122"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="140" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" /><Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="105" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" /><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="AddLibPath" id="15" localization="8" tooltip="Libへのパスを追加します" x="103" y="48"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import os
import sys

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.framemanager = ALProxy('ALFrameManager')
        self.folderName = None

    def onUnload(self):
        self.framemanager = None
        if self.folderName and self.folderName in sys.path:
            sys.path.remove(self.folderName)
        self.folderName = None

    def onInput_onStart(self):
        """
        : > INPUT
        :
        : カスタムモジュールをインポーツするためにライブラリーをシステムパスに追加します。
        """
        self.folderName = os.path.join(self.framemanager.getBehaviorPath(self.behaviorId), '../lib')

        # パスを追加してカスタムモジュールをインポートできるようになります。
        if self.folderName not in sys.path:
            sys.path.append(self.folderName)

        self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る。" id="3" /><Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" /></Box><Box name="WebSocket" id="8" localization="8" tooltip="WebSocket クライアントボックス" x="345" y="80"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import json

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.pathModified = False
        self.appFolder = self.behaviorAbsolutePath().replace(self.behaviorRelativePath(), "")
        self.folderName = os.path.join(self.appFolder, "lib")
        sys.path.insert(1, self.folderName)
        self.pathModified = True

        self.ws = None
        self.bOpening = False

        self.memory = ALProxy('ALMemory')

    def onUnload(self):
        if self.ws != None:
            self.ws.close()

        if  self.pathModified:
            while self.folderName and self.folderName in sys.path:
                sys.path.remove(self.folderName)

        self.folderName = None

        self.memory = None

    def onInput_onStart(self):
        if self.bOpening:
            self.logger.info("websocket client already opening..")
            return

        import websocket
        import six
        self.serverURI = self.getParameter("Server URI")

        websocket.enableTrace(True)
        self.logger.info(self.serverURI)
        self.ws = websocket.WebSocketApp(self.serverURI,
                                    on_message = self.on_message,
                                    on_error = self.on_error,
                                    on_close = self.on_close)
        self.ws.on_open = self.on_open
        self.ws.run_forever()

    def onInput_sendMessage(self, p):
        if self.bOpening:
            self.ws.send(p)
            self.onMessageSent()

    def on_message(self, ws, message):
        # 以下を修正しました
        result = json.loads(message)
        temp = int(result['temp'])
        comment = result['comment'].encode('utf-8')

        # 温度を表示します
        self.memory.raiseEvent('node_red_sample_app/iot_temp_change', temp)

        # コメントがあれば、発話します
        if comment:
            self.onMessage(str(temp) + comment)

    def on_error(self, ws, error):
        self.bOpening = False
        self.logger.info("WebSocket Error:" + error)

    def on_close(self, ws):
        self.bOpening = False
        self.logger.info("Websocket closed")

    def on_open(self, ws):
        self.bOpening = True

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="sendMessage" type="3" type_size="1" nature="1" inner="0" tooltip="" id="3" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="4" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" /><Output name="onMessage" type="3" type_size="1" nature="2" inner="0" tooltip="" id="6" /><Output name="onMessageSent" type="1" type_size="1" nature="2" inner="0" tooltip="" id="7" /><Parameter name="Server URI" inherits_from_parent="0" content_type="3" value="" default_value="" custom_choice="0" tooltip="" id="8" /></Box><Box name="Comment" id="2" localization="8" tooltip="To comment your behavior. Enter the text here and move the box where you like&#x0A;to add the comment.&#x0A;&#x0A;Note: This box is not functional and has no effect on the behavior." plugin="textedit_plugin" x="392" y="236"><bitmap>media/images/box/box-script.png</bitmap><script language="4"><content><![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)

	def onInput_onStart(self):
		self.onStopped("WebSocketでNodeRedアプリに接続します。NodeRedアプリは定期的にPepperにシミュレーターの温度をプッシュします。Pepperはその結果を受診すると、タブレットに表示したり、一言を言ったりします。")]]></content></script><pluginContent><text><![CDATA[WebSocketでNodeRedアプリに接続します。NodeRedアプリは定期的にPepperにシミュレーターの温度をプッシュします。Pepperはその結果を受診すると、タブレットに表示したり、一言を言ったりします。]]></text></pluginContent><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /></Box><Box name="ShowApp" id="3" localization="8" tooltip="Loads the application on the tablet, if it exists, and displays the webview.&#x0A;&#x0A;V1.0.0&#x0A;" x="113" y="187"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        self.tabletService = ALProxy('ALTabletService')
        self.appName = self.packageUid()

        self.isRunning = False

    def onUnload(self):
        self.tabletService = None
        self.appName = None

        self.isRunning = False

    def onInput_onStart(self):
        """
        : > INPUT
        : アプリのindex.htmlを表示します（初期化時のみに発生します）
        """
        if not self.isRunning:
            self.isRunning = True
            self.tabletService.loadApplication(self.appName)
            self.tabletService.showWebview()
            self.onTabletInitialised()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onTabletInitialised" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" /><Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" /></Box><Link inputowner="15" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="8" indexofinput="2" outputowner="15" indexofoutput="3" /><Link inputowner="1" indexofinput="2" outputowner="8" indexofoutput="6" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>